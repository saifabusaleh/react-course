{"version":3,"sources":["components/Person.js","components/Persons.js","components/PersonForm.js","components/Filter.js","services/personsService.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Person","_ref","person","deletePerson","react_default","a","createElement","name","number","onClick","Persons","persons","searchTerm","personsToShow","filter","toLowerCase","startsWith","map","components_Person","key","PersonForm","newName","handleNameChange","newNumber","handleNumberChange","AddName","onSubmit","value","onChange","type","Filter","handleSearchTermChange","baseUrl","personsService","axios","get","then","response","data","newObject","post","id","put","concat","delete","Notification","message","isSuccess","className","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setSearchTerm","_useState9","_useState10","successMessage","setSuccessMessage","_useState11","_useState12","setIsSuccess","updateMessage","setTimeout","useEffect","catch","error","console","log","components_Notification","components_Filter","event","target","components_PersonForm","preventDefault","personObject","date","Date","toISOString","isPersonAlreadyExist","find","window","confirm","addedPersonResult","components_Persons","personId","personToBeDeleted","deletePersonResult","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a203d0d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = ({person, deletePerson}) => {\r\nconst onDeletePerson = () => {\r\n    deletePerson(person);\r\n}\r\nreturn(\r\n    <div>\r\n    {person.name} {person.number}  \r\n    <button onClick={onDeletePerson}>delete</button>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Person;","import React from 'react'\r\nimport Person from './Person'\r\nconst Persons = ({persons, searchTerm, deletePerson}) => {\r\n    const personsToShow = searchTerm\r\n    ? persons.filter(person => person.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\r\n    : persons;\r\n    const rows = () => personsToShow.map(person =>\r\n        <Person\r\n          key={person.name}\r\n          person={person}\r\n          deletePerson={deletePerson}\r\n        />\r\n      )\r\nreturn(\r\n    <div>{rows()}</div>\r\n    \r\n)\r\n}\r\n\r\nexport default Persons;","import React from 'react'\r\n\r\nconst PersonForm = ({newName, handleNameChange, newNumber, handleNumberChange, AddName}) => {\r\nreturn(\r\n    <form onSubmit={AddName}> \r\n        <div>\r\n          name: <input value={newName}\r\n          onChange={handleNameChange}/>\r\n          <div>\r\n            number: <input value={newNumber}\r\n          onChange={handleNumberChange}/></div>\r\n\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n)\r\n}\r\n\r\nexport default PersonForm;","import React from 'react'\r\n\r\nconst Filter = ({searchTerm, handleSearchTermChange}) => {\r\nreturn(\r\n    <div><input value={searchTerm}\r\n    onChange={handleSearchTermChange}/></div>\r\n)\r\n}\r\n\r\nexport default Filter;","import axios from 'axios'\r\nconst baseUrl = 'api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\nexport default { getAll, create, update, deletePerson }","import React from 'react'\r\n\r\nconst Notification = ({ message, isSuccess }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  if(isSuccess) {\r\n    return (\r\n      <div className=\"success\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification ","import React, { useState, useEffect } from 'react';\nimport Persons from './components/Persons';\nimport PersonForm from './components/PersonForm';\nimport Filter from './components/Filter';\nimport personsService from './services/personsService';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [ persons, setPersons] = useState([\n    { name: 'Arto Hellas', number: '123-456-789'}\n  ]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [isSuccess, setIsSuccess] = useState(true)\n\n  const updateMessage = (message, isSuccess) => {\n    setIsSuccess(isSuccess);\n    setSuccessMessage(message)\n    setTimeout(() => {\n      setSuccessMessage(null)\n    }, 5000)\n  }\n\n  useEffect(() => {\n    personsService\n    .getAll()\n      .then(persons => {\n        setPersons(persons)\n      })\n      .catch(error => {\n        console.log('getAll persons failed ', error)\n        updateMessage(`failed to getAll, ${error}`,false);\n      })\n  }, [])\n\n  const AddName = (event) => {\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber,\n      date: new Date().toISOString(),\n    }\n\n    let isPersonAlreadyExist = persons.find((person)=> person.name === newName);\n    if(isPersonAlreadyExist) {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with new one?`)) {\n        personsService\n        .update(isPersonAlreadyExist.id, personObject)\n          .then(addedPersonResult => {\n            setPersons(persons.map(person => person.id !== isPersonAlreadyExist.id ? person : addedPersonResult))\n            setNewName('')\n            setNewNumber('')\n\n            updateMessage(`${addedPersonResult.name} updated.`, true);\n          })\n          .catch(error => {\n            console.log('update person failed ', error)\n            updateMessage(`failed to update person, ${error}`,false);\n          })\n      }\n    } else {\n      personsService\n      .create(personObject)\n        .then(addedPersonResult => {\n          setPersons(persons.concat(addedPersonResult))\n          setNewName('')\n          setNewNumber('')\n          updateMessage(`${addedPersonResult.name} added.`, true);\n        })\n        .catch(error => {\n          console.log('create person failed ', error)\n          updateMessage(`failed to create person, ${error}`,false);\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchTermChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n  const deletePerson = (personToBeDeleted) => {\n    if (window.confirm(`Do you really want to delete ${personToBeDeleted.name}?`))  {\n      personsService\n      .deletePerson(personToBeDeleted.id)\n        .then(deletePersonResult => {\n          console.log(deletePersonResult);\n          setPersons(persons.filter(person=>person.id !== personToBeDeleted.id));\n          setNewName('')\n          setNewNumber('')\n          updateMessage(`${personToBeDeleted.name} deleted.`, true);\n        })\n        .catch(error => {\n          console.log('create person failed ', error)\n          updateMessage(`failed to delete, ${error}`,false);\n        })\n      }\n    }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={successMessage} isSuccess={isSuccess}/>\n\n      <Filter searchTerm={searchTerm} handleSearchTermChange={(event)=> handleSearchTermChange(event)}></Filter>\n      <h2>Add a new</h2>\n      <PersonForm newName={newName} newNumber={newNumber} handleNameChange={(event)=>handleNameChange(event)}\n                  handleNumberChange={(event)=> handleNumberChange(event)} AddName={(event)=>AddName(event)}></PersonForm>\n      \n      <Persons searchTerm={searchTerm} persons={persons}\n                deletePerson={(personId)=>deletePerson(personId)}></Persons>\n      \n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}